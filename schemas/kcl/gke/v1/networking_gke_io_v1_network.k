"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1
_regex_match = regex.match


schema Network:
    r"""
    Network represent a logical network on the K8s Cluster. This logical network depends on the host networking setup on cluster nodes.

    Attributes
    ----------
    apiVersion : str, default is "networking.gke.io/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Network", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : NetworkingGkeIoV1NetworkSpec, default is Undefined, optional
        spec
    status : NetworkingGkeIoV1NetworkStatus, default is Undefined, optional
        status
    """


    apiVersion: "networking.gke.io/v1" = "networking.gke.io/v1"

    kind: "Network" = "Network"

    metadata?: v1.ObjectMeta

    spec?: NetworkingGkeIoV1NetworkSpec

    status?: NetworkingGkeIoV1NetworkStatus


schema NetworkingGkeIoV1NetworkSpec:
    r"""
    NetworkSpec contains the specifications for network object

    Attributes
    ----------
    IPAMMode : str, default is "Internal", optional
        IPAMMode specifies the IPAM mode for the network. Valid options include: internal, external
    dnsConfig : NetworkingGkeIoV1NetworkSpecDNSConfig, default is Undefined, optional
        dns config
    externalDHCP4 : bool, default is Undefined, optional
        ExternalDHCP4 indicates whether the IPAM is static or allocation by the external DHCP server
    gateway4 : str, default is Undefined, optional
        Gateway4 defines the gateway IPv4 address for the network. Required if ExternalDHCP4 is false or not set on L2 type network.
    l2NetworkConfig : NetworkingGkeIoV1NetworkSpecL2NetworkConfig, default is Undefined, optional
        l2 network config
    networkLifecycle : str, default is Undefined, optional
        NetworkLifecycle specifies who manages the lifecycle of the network. This field can only be used when L2NetworkConfig.VlanID is specified. Otherwise the value will be ignored. If L2NetworkConfig.VlanID is specified and this field is empty, the value is assumed to be AnthosManaged.
    nodeInterfaceMatcher : NetworkingGkeIoV1NetworkSpecNodeInterfaceMatcher, default is Undefined, optional
        node interface matcher
    parametersRef : NetworkingGkeIoV1NetworkSpecParametersRef, default is Undefined, optional
        parameters ref
    provider : str, default is Undefined, optional
        Provider specifies the provider implementing this network, e.g. "GKE".
    routes : [NetworkingGkeIoV1NetworkSpecRoutesItems0], default is Undefined, optional
        Routes contains a list of routes for the network.
    $type : str, default is Undefined, required
        Type defines type of network. Valid options include: L2, L3, Device. L2 network type enables L2 connectivity on the network. L3 network type enables L3 connectivity on the network. Device network type enables direct device access on the network.
    """


    IPAMMode?: "Internal" | "External" = "Internal"

    dnsConfig?: NetworkingGkeIoV1NetworkSpecDNSConfig

    externalDHCP4?: bool

    gateway4?: str

    l2NetworkConfig?: NetworkingGkeIoV1NetworkSpecL2NetworkConfig

    networkLifecycle?: "AnthosManaged" | "UserManaged"

    nodeInterfaceMatcher?: NetworkingGkeIoV1NetworkSpecNodeInterfaceMatcher

    parametersRef?: NetworkingGkeIoV1NetworkSpecParametersRef

    provider?: "GKE"

    routes?: [NetworkingGkeIoV1NetworkSpecRoutesItems0]

    $type: "L2" | "L3" | "Device"


schema NetworkingGkeIoV1NetworkSpecDNSConfig:
    r"""
    Specifies the DNS configuration of the network. Required if ExternalDHCP4 is false or not set on L2 type network.

    Attributes
    ----------
    nameservers : [str], default is Undefined, required
        A list of nameserver IP addresses. Duplicated nameservers will be removed.
    searches : [str], default is Undefined, optional
        A list of DNS search domains for host-name lookup. Duplicated search paths will be removed.
    """


    nameservers: [str]

    searches?: [str]


    check:
        len(nameservers) >= 1


schema NetworkingGkeIoV1NetworkSpecL2NetworkConfig:
    r"""
    L2NetworkConfig includes all the network config related to L2 type network

    Attributes
    ----------
    prefixLength4 : int, default is Undefined, optional
        PrefixLength4 denotes the IPv4 prefix length of the range corresponding to the network. It is used to assign IPs to the pods for multi-networking. This field is required when IPAM is handled internally and dynamically via CCC. It's disallowed for other cases. For static IP, the prefix length is set as part of the address in NetworkInterface object.
    vlanID : int, default is Undefined, optional
        VlanID is the vlan ID used for the network. If unspecified, vlan tagging is not enabled.
    """


    prefixLength4?: int

    vlanID?: int


    check:
        prefixLength4 <= 32 if prefixLength4 not in [None, Undefined]
        prefixLength4 >= 1 if prefixLength4 not in [None, Undefined]
        vlanID <= 4094 if vlanID not in [None, Undefined]
        vlanID >= 1 if vlanID not in [None, Undefined]


schema NetworkingGkeIoV1NetworkSpecNodeInterfaceMatcher:
    r"""
    NodeInterfaceMatcher defines the matcher to discover the corresponding node interface associated with the network. This field is required for L2 network.

    Attributes
    ----------
    interfaceName : str, default is Undefined, optional
        InterfaceName specifies the interface name to search on the node.
    """


    interfaceName?: str


    check:
        len(interfaceName) >= 1 if interfaceName


schema NetworkingGkeIoV1NetworkSpecParametersRef:
    r"""
    ParametersRef is a reference to a resource that contains vendor or implementation specific configurations for the network.

    Attributes
    ----------
    group : str, default is Undefined, required
        Group is the API group of k8s resource, e.g. "networking.k8s.io".
    kind : str, default is Undefined, required
        Kind is kind of the referent, e.g. "networkpolicy".
    name : str, default is Undefined, required
        Name is the name of the resource object.
    namespace : str, default is Undefined, optional
        Namespace is the namespace of the referent. This field is required when referring to a Namespace-scoped resource and MUST be unset when referring to a Cluster-scoped resource.
    """


    group: str

    kind: str

    name: str

    namespace?: str


schema NetworkingGkeIoV1NetworkSpecRoutesItems0:
    r"""
    Route defines a routing table entry to a specific subnetwork.

    Attributes
    ----------
    to : str, default is Undefined, required
        To defines a destination IPv4 block in CIDR annotation. e.g. 192.168.0.0/24. The CIDR 0.0.0.0/0 will be rejected.
    """


    to: str


schema NetworkingGkeIoV1NetworkStatus:
    r"""
    NetworkStatus contains the status information related to the network.

    Attributes
    ----------
    conditions : [NetworkingGkeIoV1NetworkStatusConditionsItems0], default is Undefined, optional
        Conditions is a field representing the current conditions of the Network. 
         Known condition types are: 
         * "Ready" * "ParamsReady"
    """


    conditions?: [NetworkingGkeIoV1NetworkStatusConditionsItems0]


schema NetworkingGkeIoV1NetworkStatusConditionsItems0:
    r"""
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
     type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition. This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    """


    lastTransitionTime: str

    message: str

    observedGeneration?: int

    reason: str

    status: "True" | "False" | "Unknown"

    $type: str


    check:
        len(message) <= 32768
        observedGeneration >= 0 if observedGeneration not in [None, Undefined]
        len(reason) <= 1024
        len(reason) >= 1
        _regex_match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        _regex_match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")


