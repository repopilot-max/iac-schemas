"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema BackendConfig:
    r"""
    cloud google com v1 backend config

    Attributes
    ----------
    apiVersion : str, default is "cloud.google.com/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "BackendConfig", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : CloudGoogleComV1BackendConfigSpec, default is Undefined, optional
        spec
    status : any, default is Undefined, optional
        status
    """


    apiVersion: "cloud.google.com/v1" = "cloud.google.com/v1"

    kind: "BackendConfig" = "BackendConfig"

    metadata?: v1.ObjectMeta

    spec?: CloudGoogleComV1BackendConfigSpec

    status?: any


schema CloudGoogleComV1BackendConfigSpec:
    r"""
    BackendConfigSpec is the spec for a BackendConfig resource

    Attributes
    ----------
    cdn : CloudGoogleComV1BackendConfigSpecCdn, default is Undefined, optional
        cdn
    connectionDraining : CloudGoogleComV1BackendConfigSpecConnectionDraining, default is Undefined, optional
        connection draining
    customRequestHeaders : CloudGoogleComV1BackendConfigSpecCustomRequestHeaders, default is Undefined, optional
        custom request headers
    customResponseHeaders : CloudGoogleComV1BackendConfigSpecCustomResponseHeaders, default is Undefined, optional
        custom response headers
    healthCheck : CloudGoogleComV1BackendConfigSpecHealthCheck, default is Undefined, optional
        health check
    iap : CloudGoogleComV1BackendConfigSpecIap, default is Undefined, optional
        iap
    logging : CloudGoogleComV1BackendConfigSpecLogging, default is Undefined, optional
        logging
    securityPolicy : CloudGoogleComV1BackendConfigSpecSecurityPolicy, default is Undefined, optional
        security policy
    sessionAffinity : CloudGoogleComV1BackendConfigSpecSessionAffinity, default is Undefined, optional
        session affinity
    timeoutSec : int, default is Undefined, optional
        timeout sec
    """


    cdn?: CloudGoogleComV1BackendConfigSpecCdn

    connectionDraining?: CloudGoogleComV1BackendConfigSpecConnectionDraining

    customRequestHeaders?: CloudGoogleComV1BackendConfigSpecCustomRequestHeaders

    customResponseHeaders?: CloudGoogleComV1BackendConfigSpecCustomResponseHeaders

    healthCheck?: CloudGoogleComV1BackendConfigSpecHealthCheck

    iap?: CloudGoogleComV1BackendConfigSpecIap

    logging?: CloudGoogleComV1BackendConfigSpecLogging

    securityPolicy?: CloudGoogleComV1BackendConfigSpecSecurityPolicy

    sessionAffinity?: CloudGoogleComV1BackendConfigSpecSessionAffinity

    timeoutSec?: int


schema CloudGoogleComV1BackendConfigSpecCdn:
    r"""
    CDNConfig contains configuration for CDN-enabled backends.

    Attributes
    ----------
    bypassCacheOnRequestHeaders : [CloudGoogleComV1BackendConfigSpecCdnBypassCacheOnRequestHeadersItems0], default is Undefined, optional
        bypass cache on request headers
    cacheMode : str, default is Undefined, optional
        cache mode
    cachePolicy : CloudGoogleComV1BackendConfigSpecCdnCachePolicy, default is Undefined, optional
        cache policy
    clientTtl : int, default is Undefined, optional
        client Ttl
    defaultTtl : int, default is Undefined, optional
        default Ttl
    enabled : bool, default is Undefined, required
        enabled
    maxTtl : int, default is Undefined, optional
        max Ttl
    negativeCaching : bool, default is Undefined, optional
        negative caching
    negativeCachingPolicy : [CloudGoogleComV1BackendConfigSpecCdnNegativeCachingPolicyItems0], default is Undefined, optional
        negative caching policy
    requestCoalescing : bool, default is Undefined, optional
        request coalescing
    serveWhileStale : int, default is Undefined, optional
        serve while stale
    signedUrlCacheMaxAgeSec : int, default is Undefined, optional
        signed Url cache max age sec
    signedUrlKeys : [CloudGoogleComV1BackendConfigSpecCdnSignedURLKeysItems0], default is Undefined, optional
        signed Url keys
    """


    bypassCacheOnRequestHeaders?: [CloudGoogleComV1BackendConfigSpecCdnBypassCacheOnRequestHeadersItems0]

    cacheMode?: str

    cachePolicy?: CloudGoogleComV1BackendConfigSpecCdnCachePolicy

    clientTtl?: int

    defaultTtl?: int

    enabled: bool = False

    maxTtl?: int

    negativeCaching?: bool

    negativeCachingPolicy?: [CloudGoogleComV1BackendConfigSpecCdnNegativeCachingPolicyItems0]

    requestCoalescing?: bool

    serveWhileStale?: int

    signedUrlCacheMaxAgeSec?: int

    signedUrlKeys?: [CloudGoogleComV1BackendConfigSpecCdnSignedURLKeysItems0]


schema CloudGoogleComV1BackendConfigSpecCdnBypassCacheOnRequestHeadersItems0:
    r"""
    BypassCacheOnRequestHeader contains configuration for how requests containing specific request headers bypass the cache, even if the content was previously cached.

    Attributes
    ----------
    headerName : str, default is Undefined, optional
        The header field name to match on when bypassing cache. Values are case-insensitive.
    """


    headerName?: str


schema CloudGoogleComV1BackendConfigSpecCdnCachePolicy:
    r"""
    CacheKeyPolicy contains configuration for how requests to a CDN-enabled backend are cached.

    Attributes
    ----------
    includeHost : bool, default is Undefined, optional
        If true, requests to different hosts will be cached separately.
    includeProtocol : bool, default is Undefined, optional
        If true, http and https requests will be cached separately.
    includeQueryString : bool, default is Undefined, optional
        If true, query string parameters are included in the cache key according to QueryStringBlacklist and QueryStringWhitelist. If neither is set, the entire query string is included and if false the entire query string is excluded.
    queryStringBlacklist : [str], default is Undefined, optional
        Names of query strint parameters to exclude from cache keys. All other parameters are included. Either specify QueryStringBlacklist or QueryStringWhitelist, but not both.
    queryStringWhitelist : [str], default is Undefined, optional
        Names of query string parameters to include in cache keys. All other parameters are excluded. Either specify QueryStringBlacklist or QueryStringWhitelist, but not both.
    """


    includeHost?: bool

    includeProtocol?: bool

    includeQueryString?: bool

    queryStringBlacklist?: [str]

    queryStringWhitelist?: [str]


schema CloudGoogleComV1BackendConfigSpecCdnNegativeCachingPolicyItems0:
    r"""
    NegativeCachingPolicy contains configuration for how negative caching is applied.

    Attributes
    ----------
    code : int, default is Undefined, optional
        The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
    ttl : int, default is Undefined, optional
        The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    """


    code?: int

    ttl?: int


schema CloudGoogleComV1BackendConfigSpecCdnSignedURLKeysItems0:
    r"""
    SignedUrlKey represents a customer-supplied Signing Key used by Cloud CDN Signed URLs

    Attributes
    ----------
    keyName : str, default is Undefined, optional
        KeyName: Name of the key. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    keyValue : str, default is Undefined, optional
        KeyValue: 128-bit key value used for signing the URL. The key value must be a valid RFC 4648 Section 5 base64url encoded string.
    secretName : str, default is Undefined, optional
        The name of a k8s secret which stores the 128-bit key value used for signing the URL. The key value must be a valid RFC 4648 Section 5 base64url encoded string
    """


    keyName?: str

    keyValue?: str

    secretName?: str


schema CloudGoogleComV1BackendConfigSpecConnectionDraining:
    r"""
    ConnectionDrainingConfig contains configuration for connection draining. For now the draining timeout. May manage more settings in the future.

    Attributes
    ----------
    drainingTimeoutSec : int, default is Undefined, optional
        Draining timeout in seconds.
    """


    drainingTimeoutSec?: int


schema CloudGoogleComV1BackendConfigSpecCustomRequestHeaders:
    r"""
    CustomRequestHeadersConfig contains configuration for custom request headers

    Attributes
    ----------
    headers : [str], default is Undefined, optional
        headers
    """


    headers?: [str]


schema CloudGoogleComV1BackendConfigSpecCustomResponseHeaders:
    r"""
    CustomResponseHeadersConfig contains configuration for custom response headers

    Attributes
    ----------
    headers : [str], default is Undefined, optional
        headers
    """


    headers?: [str]


schema CloudGoogleComV1BackendConfigSpecHealthCheck:
    r"""
    HealthCheckConfig contains configuration for the health check.

    Attributes
    ----------
    checkIntervalSec : int, default is Undefined, optional
        CheckIntervalSec is a health check parameter. See https://cloud.google.com/compute/docs/reference/rest/v1/healthChecks.
    healthyThreshold : int, default is Undefined, optional
        HealthyThreshold is a health check parameter. See https://cloud.google.com/compute/docs/reference/rest/v1/healthChecks.
    port : int, default is Undefined, optional
        Port is a health check parameter. See https://cloud.google.com/compute/docs/reference/rest/v1/healthChecks. If Port is used, the controller updates portSpecification as well
    requestPath : str, default is Undefined, optional
        RequestPath is a health check parameter. See https://cloud.google.com/compute/docs/reference/rest/v1/healthChecks.
    timeoutSec : int, default is Undefined, optional
        TimeoutSec is a health check parameter. See https://cloud.google.com/compute/docs/reference/rest/v1/healthChecks.
    $type : str, default is Undefined, optional
        Type is a health check parameter. See https://cloud.google.com/compute/docs/reference/rest/v1/healthChecks.
    unhealthyThreshold : int, default is Undefined, optional
        UnhealthyThreshold is a health check parameter. See https://cloud.google.com/compute/docs/reference/rest/v1/healthChecks.
    """


    checkIntervalSec?: int

    healthyThreshold?: int

    port?: int

    requestPath?: str

    timeoutSec?: int

    $type?: str

    unhealthyThreshold?: int


schema CloudGoogleComV1BackendConfigSpecIap:
    r"""
    IAPConfig contains configuration for IAP-enabled backends.

    Attributes
    ----------
    enabled : bool, default is Undefined, required
        enabled
    oauthclientCredentials : CloudGoogleComV1BackendConfigSpecIapOauthclientCredentials, default is Undefined, optional
        oauthclient credentials
    """


    enabled: bool = False

    oauthclientCredentials?: CloudGoogleComV1BackendConfigSpecIapOauthclientCredentials


schema CloudGoogleComV1BackendConfigSpecIapOauthclientCredentials:
    r"""
    OAuthClientCredentials contains credentials for a single IAP-enabled backend.

    Attributes
    ----------
    clientID : str, default is Undefined, optional
        Direct reference to OAuth client id.
    clientSecret : str, default is Undefined, optional
        Direct reference to OAuth client secret.
    secretName : str, default is Undefined, required
        The name of a k8s secret which stores the OAuth client id & secret.
    """


    clientID?: str

    clientSecret?: str

    secretName: str = ""


schema CloudGoogleComV1BackendConfigSpecLogging:
    r"""
    LogConfig contains configuration for logging.

    Attributes
    ----------
    enable : bool, default is Undefined, optional
        This field denotes whether to enable logging for the load balancer traffic served by this backend service.
    sampleRate : float, default is Undefined, optional
        This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
    """


    enable?: bool

    sampleRate?: float


schema CloudGoogleComV1BackendConfigSpecSecurityPolicy:
    r"""
    SecurityPolicyConfig contains configuration for CloudArmor-enabled backends. If not specified, the controller will not reconcile the security policy configuration. In other words, users can make changes in GCE without the controller overwriting them.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the security policy that should be associated. If set to empty, the existing security policy on the backend will be removed.
    """


    name: str = ""


schema CloudGoogleComV1BackendConfigSpecSessionAffinity:
    r"""
    SessionAffinityConfig contains configuration for stickiness parameters.

    Attributes
    ----------
    affinityCookieTtlSec : int, default is Undefined, optional
        affinity cookie Ttl sec
    affinityType : str, default is Undefined, optional
        affinity type
    """


    affinityCookieTtlSec?: int

    affinityType?: str


