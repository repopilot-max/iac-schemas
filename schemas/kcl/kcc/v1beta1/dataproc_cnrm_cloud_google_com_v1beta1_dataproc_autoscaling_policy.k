"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema DataprocAutoscalingPolicy:
    r"""
    dataproc cnrm cloud google com v1beta1 dataproc autoscaling policy

    Attributes
    ----------
    apiVersion : str, default is "dataproc.cnrm.cloud.google.com/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "DataprocAutoscalingPolicy", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpec, default is Undefined, required
        spec
    status : DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicyStatus, default is Undefined, optional
        status
    """


    apiVersion: "dataproc.cnrm.cloud.google.com/v1beta1" = "dataproc.cnrm.cloud.google.com/v1beta1"

    kind: "DataprocAutoscalingPolicy" = "DataprocAutoscalingPolicy"

    metadata?: v1.ObjectMeta

    spec: DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpec

    status?: DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicyStatus


schema DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpec:
    r"""
    dataproc cnrm cloud google com v1beta1 dataproc autoscaling policy spec

    Attributes
    ----------
    basicAlgorithm : DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecBasicAlgorithm, default is Undefined, required
        basic algorithm
    location : str, default is Undefined, required
        Immutable. The location for the resource
    projectRef : DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecProjectRef, default is Undefined, optional
        project ref
    resourceID : str, default is Undefined, optional
        Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
    secondaryWorkerConfig : DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecSecondaryWorkerConfig, default is Undefined, optional
        secondary worker config
    workerConfig : DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecWorkerConfig, default is Undefined, required
        worker config
    """


    basicAlgorithm: DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecBasicAlgorithm

    location: str

    projectRef?: DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecProjectRef

    resourceID?: str

    secondaryWorkerConfig?: DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecSecondaryWorkerConfig

    workerConfig: DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecWorkerConfig


schema DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecBasicAlgorithm:
    r"""
    dataproc cnrm cloud google com v1beta1 dataproc autoscaling policy spec basic algorithm

    Attributes
    ----------
    cooldownPeriod : str, default is Undefined, optional
        Optional. Duration between scaling events. A scaling period starts after the update operation from the previous event has completed. Bounds: . Default: 2m.
    yarnConfig : DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecBasicAlgorithmYarnConfig, default is Undefined, required
        yarn config
    """


    cooldownPeriod?: str

    yarnConfig: DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecBasicAlgorithmYarnConfig


schema DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecBasicAlgorithmYarnConfig:
    r"""
    Required. YARN autoscaling configuration.

    Attributes
    ----------
    gracefulDecommissionTimeout : str, default is Undefined, required
        Required. Timeout for YARN graceful decommissioning of Node Managers. Specifies the duration to wait for jobs to complete before forcefully removing workers (and potentially interrupting jobs). Only applicable to downscaling operations.
    scaleDownFactor : float, default is Undefined, required
        Required. Fraction of average YARN pending memory in the last cooldown period for which to remove workers. A scale-down factor of 1 will result in scaling down so that there is no available memory remaining after the update (more aggressive scaling). A scale-down factor of 0 disables removing workers, which can be beneficial for autoscaling a single job. See .
    scaleDownMinWorkerFraction : float, default is Undefined, optional
        Optional. Minimum scale-down threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0 means the autoscaler will scale down on any recommended change. Bounds: . Default: 0.0.
    scaleUpFactor : float, default is Undefined, required
        Required. Fraction of average YARN pending memory in the last cooldown period for which to add workers. A scale-up factor of 1.0 will result in scaling up so that there is no pending memory remaining after the update (more aggressive scaling). A scale-up factor closer to 0 will result in a smaller magnitude of scaling up (less aggressive scaling). See .
    scaleUpMinWorkerFraction : float, default is Undefined, optional
        Optional. Minimum scale-up threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of 0 means the autoscaler will scale up on any recommended change. Bounds: . Default: 0.0.
    """


    gracefulDecommissionTimeout: str

    scaleDownFactor: float

    scaleDownMinWorkerFraction?: float

    scaleUpFactor: float

    scaleUpMinWorkerFraction?: float


schema DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecProjectRef:
    r"""
    Immutable. The Project that this resource belongs to.

    Attributes
    ----------
    external : str, default is Undefined, optional
        The project for the resource

        Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    """


    external?: str

    name?: str

    namespace?: str


schema DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecSecondaryWorkerConfig:
    r"""
    Optional. Describes how the autoscaler will operate for secondary workers.

    Attributes
    ----------
    maxInstances : int, default is Undefined, optional
        Optional. Maximum number of instances for this group. Note that by default, clusters will not use secondary workers. Required for secondary workers if the minimum secondary instances is set. Primary workers - Bounds: [min_instances, ). Secondary workers - Bounds: [min_instances, ). Default: 0.
    minInstances : int, default is Undefined, optional
        Optional. Minimum number of instances for this group. Primary workers - Bounds: . Default: 0.
    weight : int, default is Undefined, optional
        Optional. Weight for the instance group, which is used to determine the fraction of total workers in the cluster from this instance group. For example, if primary workers have weight 2, and secondary workers have weight 1, the cluster will have approximately 2 primary workers for each secondary worker. The cluster may not reach the specified balance if constrained by min/max bounds or other autoscaling settings. For example, if `max_instances` for secondary workers is 0, then only primary workers will be added. The cluster can also be out of balance when created. If weight is not set on any instance group, the cluster will default to equal weight for all groups: the cluster will attempt to maintain an equal number of workers in each group within the configured size bounds for each group. If weight is set for one group only, the cluster will default to zero weight on the unset group. For example if weight is set only on primary workers, the cluster will use primary workers only and no secondary workers.
    """


    maxInstances?: int

    minInstances?: int

    weight?: int


schema DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicySpecWorkerConfig:
    r"""
    Required. Describes how the autoscaler will operate for primary workers.

    Attributes
    ----------
    maxInstances : int, default is Undefined, required
        Required. Maximum number of instances for this group. Required for primary workers. Note that by default, clusters will not use secondary workers. Required for secondary workers if the minimum secondary instances is set. Primary workers - Bounds: [min_instances, ). Secondary workers - Bounds: [min_instances, ). Default: 0.
    minInstances : int, default is Undefined, optional
        Optional. Minimum number of instances for this group. Primary workers - Bounds: . Default: 0.
    weight : int, default is Undefined, optional
        Optional. Weight for the instance group, which is used to determine the fraction of total workers in the cluster from this instance group. For example, if primary workers have weight 2, and secondary workers have weight 1, the cluster will have approximately 2 primary workers for each secondary worker. The cluster may not reach the specified balance if constrained by min/max bounds or other autoscaling settings. For example, if `max_instances` for secondary workers is 0, then only primary workers will be added. The cluster can also be out of balance when created. If weight is not set on any instance group, the cluster will default to equal weight for all groups: the cluster will attempt to maintain an equal number of workers in each group within the configured size bounds for each group. If weight is set for one group only, the cluster will default to zero weight on the unset group. For example if weight is set only on primary workers, the cluster will use primary workers only and no secondary workers.
    """


    maxInstances: int

    minInstances?: int

    weight?: int


schema DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicyStatus:
    r"""
    dataproc cnrm cloud google com v1beta1 dataproc autoscaling policy status

    Attributes
    ----------
    conditions : [DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicyStatusConditionsItems0], default is Undefined, optional
        Conditions represent the latest available observation of the resource's current state.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.
    """


    conditions?: [DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicyStatusConditionsItems0]

    observedGeneration?: int


schema DataprocCnrmCloudGoogleComV1beta1DataprocAutoscalingPolicyStatusConditionsItems0:
    r"""
    dataproc cnrm cloud google com v1beta1 dataproc autoscaling policy status conditions items0

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        Last time the condition transitioned from one status to another.
    message : str, default is Undefined, optional
        Human-readable message indicating details about last transition.
    reason : str, default is Undefined, optional
        Unique, one-word, CamelCase reason for the condition's last transition.
    status : str, default is Undefined, optional
        Status is the status of the condition. Can be True, False, Unknown.
    $type : str, default is Undefined, optional
        Type is the type of the condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    status?: str

    $type?: str


