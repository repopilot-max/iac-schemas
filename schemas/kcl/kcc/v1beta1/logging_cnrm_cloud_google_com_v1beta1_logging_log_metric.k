"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema LoggingLogMetric:
    r"""
    LoggingLogMetric is the Schema for the logging API

    Attributes
    ----------
    apiVersion : str, default is "logging.cnrm.cloud.google.com/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "LoggingLogMetric", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpec, default is Undefined, required
        spec
    status : LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricStatus, default is Undefined, optional
        status
    """


    apiVersion: "logging.cnrm.cloud.google.com/v1beta1" = "logging.cnrm.cloud.google.com/v1beta1"

    kind: "LoggingLogMetric" = "LoggingLogMetric"

    metadata?: v1.ObjectMeta

    spec: LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpec

    status?: LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricStatus


schema LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpec:
    r"""
    logging cnrm cloud google com v1beta1 logging log metric spec

    Attributes
    ----------
    bucketOptions : LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecBucketOptions, default is Undefined, optional
        bucket options
    description : str, default is Undefined, optional
        Optional. A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.
    disabled : bool, default is Undefined, optional
        Optional. If set to True, then this metric is disabled and it does not generate any points.
    $filter : str, default is Undefined, required
        Required. An [advanced logs filter](https://cloud.google.com/logging/docs/view/advanced_filters) which is used to match log entries. Example: "resource.type=gae_app AND severity>=ERROR" The maximum length of the filter is 20000 characters.
    labelExtractors : {str:str}, default is Undefined, optional
        Optional. A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this map. The syntax of the extractor expression is the same as for the `value_extractor` field. The extracted value is converted to the type defined in the label descriptor. If the either the extraction or the type conversion fails, the label will have a default value. The default value for a string label is an empty string, for an integer label its 0, and for a boolean label its `false`. Note that there are upper bounds on the maximum number of labels and the number of active time series that are allowed in a project.
    loggingLogBucketRef : LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecLoggingLogBucketRef, default is Undefined, optional
        logging log bucket ref
    metricDescriptor : LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecMetricDescriptor, default is Undefined, optional
        metric descriptor
    projectRef : LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecProjectRef, default is Undefined, required
        project ref
    resourceID : str, default is Undefined, optional
        Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
    valueExtractor : str, default is Undefined, optional
        Optional. A `value_extractor` is required when using a distribution logs-based metric to extract the values to record from a log entry. Two functions are supported for value extraction: `EXTRACT(field)` or `REGEXP_EXTRACT(field, regex)`. The argument are: 1. field: The name of the log entry field from which the value is to be extracted. 2. regex: A regular expression using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error to specify a regex that does not include exactly one capture group. The result of the extraction must be convertible to a double type, as the distribution always records double values. If either the extraction or the conversion to double fails, then those values are not recorded in the distribution. Example: `REGEXP_EXTRACT(jsonPayload.request, ".*quantity=(d+).*")`
    """


    bucketOptions?: LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecBucketOptions

    description?: str

    disabled?: bool

    $filter: str

    labelExtractors?: {str:str}

    loggingLogBucketRef?: LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecLoggingLogBucketRef

    metricDescriptor?: LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecMetricDescriptor

    projectRef: LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecProjectRef

    resourceID?: str

    valueExtractor?: str


schema LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecBucketOptions:
    r"""
    Optional. The `bucket_options` are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket boundaries used to create a histogram of the extracted values.

    Attributes
    ----------
    explicitBuckets : LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecBucketOptionsExplicitBuckets, default is Undefined, optional
        explicit buckets
    exponentialBuckets : LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecBucketOptionsExponentialBuckets, default is Undefined, optional
        exponential buckets
    linearBuckets : LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecBucketOptionsLinearBuckets, default is Undefined, optional
        linear buckets
    """


    explicitBuckets?: LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecBucketOptionsExplicitBuckets

    exponentialBuckets?: LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecBucketOptionsExponentialBuckets

    linearBuckets?: LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecBucketOptionsLinearBuckets


schema LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecBucketOptionsExplicitBuckets:
    r"""
    The explicit buckets.

    Attributes
    ----------
    bounds : [float], default is Undefined, optional
        The values must be monotonically increasing.
    """


    bounds?: [float]


schema LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecBucketOptionsExponentialBuckets:
    r"""
    The exponential buckets.

    Attributes
    ----------
    growthFactor : float, default is Undefined, optional
        Must be greater than 1.
    numFiniteBuckets : int, default is Undefined, optional
        Must be greater than 0.
    scale : float, default is Undefined, optional
        Must be greater than 0.
    """


    growthFactor?: float

    numFiniteBuckets?: int

    scale?: float


schema LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecBucketOptionsLinearBuckets:
    r"""
    The linear bucket.

    Attributes
    ----------
    numFiniteBuckets : int, default is Undefined, optional
        Must be greater than 0.
    offset : float, default is Undefined, optional
        Lower bound of the first bucket.
    width : float, default is Undefined, optional
        Must be greater than 0.
    """


    numFiniteBuckets?: int

    offset?: float

    width?: float


schema LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecLoggingLogBucketRef:
    r"""
    The reference to the Log Bucket that owns the Log Metric. Only Log Buckets in projects are supported. The bucket has to be in the same project as the metric. For example:projects/my-project/locations/global/buckets/my-bucket If empty, then the Log Metric is considered a non-Bucket Log Metric. Only `external` field is supported to configure the reference for now.

    Attributes
    ----------
    external : str, default is Undefined, optional
        The external name of the referenced resource
    kind : str, default is Undefined, optional
        Kind of the referent.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    """


    external?: str

    kind?: str

    name?: str

    namespace?: str


schema LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecMetricDescriptor:
    r"""
    Optional. The metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of "1". Such a metric counts the number of log entries matching the `filter` expression. The `name`, `type`, and `description` fields in the `metric_descriptor` are output only, and is constructed using the `name` and `description` field in the LogMetric. To create a logs-based metric that records a distribution of log values, a DELTA metric kind with a DISTRIBUTION value type must be used along with a `value_extractor` expression in the LogMetric. Each label in the metric descriptor must have a matching label name as the key and an extractor expression as the value in the `label_extractors` map. The `metric_kind` and `value_type` fields in the `metric_descriptor` cannot be updated once initially configured. New labels can be added in the `metric_descriptor`, but existing labels cannot be modified except for their description.

    Attributes
    ----------
    displayName : str, default is Undefined, optional
        A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
    labels : [LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecMetricDescriptorLabelsItems0], default is Undefined, optional
        The set of labels that can be used to describe a specific instance of this metric type. For example, the `appengine.googleapis.com/http/server/response_latencies` metric type has a label for the HTTP response code, `response_code`, so you can look at latencies for successful responses or just for responses that failed.
    launchStage : str, default is Undefined, optional
        Optional. The launch stage of the metric definition. Possible values: UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, DEPRECATED
    metadata : LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecMetricDescriptorMetadata, default is Undefined, optional
        metadata
    metricKind : str, default is Undefined, optional
        Immutable. Whether the metric records instantaneous values, changes to a value, etc. Some combinations of `metric_kind` and `value_type` might not be supported. Possible values: GAUGE, DELTA, CUMULATIVE
    unit : str, default is Undefined, optional
        The units in which the metric value is reported. It is only applicable if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The `unit` defines the representation of the stored metric values. Different systems might scale the values to be more easily displayed (so a value of `0.02kBy` _might_ be displayed as `20By`, and a value of `3523kBy` _might_ be displayed as `3.5MBy`). However, if the `unit` is `kBy`, then the value of the metric is always in thousands of bytes, no matter how it might be displayed. If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an `INT64 CUMULATIVE` metric whose `unit` is `s{CPU}` (or equivalently `1s{CPU}` or just `s`). If the job uses 12,005 CPU-seconds, then the value is written as `12005`. Alternatively, if you want a custom metric to record data in a more granular way, you can create a `DOUBLE CUMULATIVE` metric whose `unit` is `ks{CPU}`, and then write the value `12.005` (which is `12005/1000`), or use `Kis{CPU}` and write `11.723` (which is `12005/1024`). The supported units are a subset of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html) standard: **Basic units (UNIT)** * `bit` bit * `By` byte * `s` second * `min` minute * `h` hour * `d` day * `1` dimensionless **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `E` exa (10^18) * `Z` zetta (10^21) * `Y` yotta (10^24) * `m` milli (10^-3) * `u` micro (10^-6) * `n` nano (10^-9) * `p` pico (10^-12) * `f` femto (10^-15) * `a` atto (10^-18) * `z` zepto (10^-21) * `y` yocto (10^-24) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or ratio (as an infix operator). For examples, `kBy/{email}` or `MiBy/10ms` (although you should almost never have `/s` in a metric `unit`; rates should always be computed at query time from the underlying cumulative or delta value). * `.` multiplication or composition (as an infix operator). For examples, `GBy.d` or `k{watt}.h`. The grammar for a unit is as follows: Expression = Component: { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: * `Annotation` is just a comment if it follows a `UNIT`. If the annotation is used alone, then the unit is equivalent to `1`. For examples, `{request}/s == 1/s`, `By{transmitted}/s == By/s`. * `NAME` is a sequence of non-blank printable ASCII characters not containing `{` or `}`. * `1` represents a unitary [dimensionless unit](https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in `1/s`. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as `1/d` or `{new-users}/d` (and a metric value `5` would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as `1000/d` or `k1/d` or `k{page_views}/d` (and a metric value of `5.3` would mean "5300 page views per day"). * `%` represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value `3` means "3 percent"). * `10^2.%` indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value `0.03` means "3 percent").
    valueType : str, default is Undefined, optional
        Immutable. Whether the measurement is an integer, a floating-point number, etc. Some combinations of `metric_kind` and `value_type` might not be supported. Possible values: STRING, BOOL, INT64, DOUBLE, DISTRIBUTION, MONEY
    """


    displayName?: str

    labels?: [LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecMetricDescriptorLabelsItems0]

    launchStage?: str

    metadata?: LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecMetricDescriptorMetadata

    metricKind?: str

    unit?: str

    valueType?: str


schema LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecMetricDescriptorLabelsItems0:
    r"""
    logging cnrm cloud google com v1beta1 logging log metric spec metric descriptor labels items0

    Attributes
    ----------
    description : str, default is Undefined, optional
        Immutable. A human-readable description for the label.
    key : str, default is Undefined, optional
        Immutable. The label key.
    valueType : str, default is Undefined, optional
        Immutable. The type of data that can be assigned to the label. Possible values: STRING, BOOL, INT64, DOUBLE, DISTRIBUTION, MONEY
    """


    description?: str

    key?: str

    valueType?: str


schema LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecMetricDescriptorMetadata:
    r"""
    Optional. Metadata which can be used to guide usage of the metric.

    Attributes
    ----------
    ingestDelay : str, default is Undefined, optional
        The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
    samplePeriod : str, default is Undefined, optional
        The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
    """


    ingestDelay?: str

    samplePeriod?: str


schema LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricSpecProjectRef:
    r"""
    Immutable. The Project that this resource belongs to.

    Attributes
    ----------
    external : str, default is Undefined, optional
        The `projectID` field of a project, when not managed by Config Connector.
    kind : str, default is Undefined, optional
        The kind of the Project resource; optional but must be `Project` if provided.
    name : str, default is Undefined, optional
        The `name` field of a `Project` resource.
    namespace : str, default is Undefined, optional
        The `namespace` field of a `Project` resource.
    """


    external?: str

    kind?: str

    name?: str

    namespace?: str


schema LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricStatus:
    r"""
    logging cnrm cloud google com v1beta1 logging log metric status

    Attributes
    ----------
    conditions : [LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricStatusConditionsItems0], default is Undefined, optional
        Conditions represent the latest available observations of the LoggingLogMetric's current state.
    createTime : str, default is Undefined, optional
        Output only. The creation timestamp of the metric. This field may not be present for older metrics.
    metricDescriptor : LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricStatusMetricDescriptor, default is Undefined, optional
        metric descriptor
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.
    updateTime : str, default is Undefined, optional
        Output only. The last update timestamp of the metric. This field may not be present for older metrics.
    """


    conditions?: [LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricStatusConditionsItems0]

    createTime?: str

    metricDescriptor?: LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricStatusMetricDescriptor

    observedGeneration?: int

    updateTime?: str


schema LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricStatusConditionsItems0:
    r"""
    logging cnrm cloud google com v1beta1 logging log metric status conditions items0

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        Last time the condition transitioned from one status to another.
    message : str, default is Undefined, optional
        Human-readable message indicating details about last transition.
    reason : str, default is Undefined, optional
        Unique, one-word, CamelCase reason for the condition's last transition.
    status : str, default is Undefined, optional
        Status is the status of the condition. Can be True, False, Unknown.
    $type : str, default is Undefined, optional
        Type is the type of the condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    status?: str

    $type?: str


schema LoggingCnrmCloudGoogleComV1beta1LoggingLogMetricStatusMetricDescriptor:
    r"""
    logging cnrm cloud google com v1beta1 logging log metric status metric descriptor

    Attributes
    ----------
    description : str, default is Undefined, optional
        A detailed description of the metric, which can be used in documentation.
    monitoredResourceTypes : [str], default is Undefined, optional
        Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
    name : str, default is Undefined, optional
        The resource name of the metric descriptor.
    $type : str, default is Undefined, optional
        The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name `custom.googleapis.com` or `external.googleapis.com`. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
    """


    description?: str

    monitoredResourceTypes?: [str]

    name?: str

    $type?: str


