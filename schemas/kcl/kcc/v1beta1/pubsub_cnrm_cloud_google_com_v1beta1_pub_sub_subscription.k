"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema PubSubSubscription:
    r"""
    pubsub cnrm cloud google com v1beta1 pub sub subscription

    Attributes
    ----------
    apiVersion : str, default is "pubsub.cnrm.cloud.google.com/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "PubSubSubscription", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpec, default is Undefined, required
        spec
    status : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionStatus, default is Undefined, optional
        status
    """


    apiVersion: "pubsub.cnrm.cloud.google.com/v1beta1" = "pubsub.cnrm.cloud.google.com/v1beta1"

    kind: "PubSubSubscription" = "PubSubSubscription"

    metadata?: v1.ObjectMeta

    spec: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpec

    status?: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionStatus


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpec:
    r"""
    pubsub cnrm cloud google com v1beta1 pub sub subscription spec

    Attributes
    ----------
    ackDeadlineSeconds : int, default is Undefined, optional
        This value is the maximum time after a subscriber receives a message
        before the subscriber should acknowledge the message. After message
        delivery but before the ack deadline expires and before the message is
        acknowledged, it is an outstanding message and will not be delivered
        again during that time (on a best-effort basis).

        For pull subscriptions, this value is used as the initial value for
        the ack deadline. To override this value for a given message, call
        subscriptions.modifyAckDeadline with the corresponding ackId if using
        pull. The minimum custom deadline you can specify is 10 seconds. The
        maximum custom deadline you can specify is 600 seconds (10 minutes).
        If this parameter is 0, a default value of 10 seconds is used.

        For push delivery, this value is also used to set the request timeout
        for the call to the push endpoint.

        If the subscriber never acknowledges the message, the Pub/Sub system
        will eventually redeliver the message.
    bigqueryConfig : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecBigqueryConfig, default is Undefined, optional
        bigquery config
    cloudStorageConfig : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecCloudStorageConfig, default is Undefined, optional
        cloud storage config
    deadLetterPolicy : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecDeadLetterPolicy, default is Undefined, optional
        dead letter policy
    enableExactlyOnceDelivery : bool, default is Undefined, optional
        If 'true', Pub/Sub provides the following guarantees for the delivery
        of a message with a given value of messageId on this Subscriptions':

        - The message sent to a subscriber is guaranteed not to be resent before the message's acknowledgement deadline expires.

        - An acknowledged message will not be resent to a subscriber.

        Note that subscribers may still receive multiple copies of a message when 'enable_exactly_once_delivery'
        is true if the message was published multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values.
    enableMessageOrdering : bool, default is Undefined, optional
        Immutable. If 'true', messages published with the same orderingKey in PubsubMessage will be delivered to
        the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they
        may be delivered in any order.
    expirationPolicy : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecExpirationPolicy, default is Undefined, optional
        expiration policy
    $filter : str, default is Undefined, optional
        Immutable. The subscription only delivers the messages that match the filter.
        Pub/Sub automatically acknowledges the messages that don't match the filter. You can filter messages
        by their attributes. The maximum length of a filter is 256 bytes. After creating the subscription,
        you can't modify the filter.
    messageRetentionDuration : str, default is Undefined, optional
        How long to retain unacknowledged messages in the subscription's
        backlog, from the moment a message is published. If
        retain_acked_messages is true, then this also configures the retention
        of acknowledged messages, and thus configures how far back in time a
        subscriptions.seek can be done. Defaults to 7 days. Cannot be more
        than 7 days ('"604800s"') or less than 10 minutes ('"600s"').

        A duration in seconds with up to nine fractional digits, terminated
        by 's'. Example: '"600.5s"'.
    pushConfig : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecPushConfig, default is Undefined, optional
        push config
    resourceID : str, default is Undefined, optional
        Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
    retainAckedMessages : bool, default is Undefined, optional
        Indicates whether to retain acknowledged messages. If 'true', then
        messages are not expunged from the subscription's backlog, even if
        they are acknowledged, until they fall out of the
        messageRetentionDuration window.
    retryPolicy : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecRetryPolicy, default is Undefined, optional
        retry policy
    topicRef : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecTopicRef, default is Undefined, required
        topic ref
    """


    ackDeadlineSeconds?: int

    bigqueryConfig?: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecBigqueryConfig

    cloudStorageConfig?: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecCloudStorageConfig

    deadLetterPolicy?: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecDeadLetterPolicy

    enableExactlyOnceDelivery?: bool

    enableMessageOrdering?: bool

    expirationPolicy?: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecExpirationPolicy

    $filter?: str

    messageRetentionDuration?: str

    pushConfig?: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecPushConfig

    resourceID?: str

    retainAckedMessages?: bool

    retryPolicy?: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecRetryPolicy

    topicRef: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecTopicRef


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecBigqueryConfig:
    r"""
    If delivery to BigQuery is used with this subscription, this field is used to configure it.
    Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
    If all three are empty, then the subscriber will pull and ack messages using API methods.

    Attributes
    ----------
    dropUnknownFields : bool, default is Undefined, optional
        When true and useTopicSchema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery.
        Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
    tableRef : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecBigqueryConfigTableRef, default is Undefined, required
        table ref
    useTopicSchema : bool, default is Undefined, optional
        When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
    writeMetadata : bool, default is Undefined, optional
        When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
        The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
    """


    dropUnknownFields?: bool

    tableRef: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecBigqueryConfigTableRef

    useTopicSchema?: bool

    writeMetadata?: bool


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecBigqueryConfigTableRef:
    r"""
    The name of the table to which to write data.

    Attributes
    ----------
    external : str, default is Undefined, optional
        Allowed value: string of the format `{{project}}.{{dataset_id}}.{{value}}`, where {{value}} is the `name` field of a `BigQueryTable` resource.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    """


    external?: str

    name?: str

    namespace?: str


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecCloudStorageConfig:
    r"""
    If delivery to Cloud Storage is used with this subscription, this field is used to configure it.
    Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
    If all three are empty, then the subscriber will pull and ack messages using API methods.

    Attributes
    ----------
    avroConfig : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecCloudStorageConfigAvroConfig, default is Undefined, optional
        avro config
    bucketRef : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecCloudStorageConfigBucketRef, default is Undefined, required
        bucket ref
    filenamePrefix : str, default is Undefined, optional
        User-provided prefix for Cloud Storage filename.
    filenameSuffix : str, default is Undefined, optional
        User-provided suffix for Cloud Storage filename. Must not end in "/".
    maxBytes : int, default is Undefined, optional
        The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB.
        The maxBytes limit may be exceeded in cases where messages are larger than the limit.
    maxDuration : str, default is Undefined, optional
        The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes.
        May not exceed the subscription's acknowledgement deadline.
        A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
    state : str, default is Undefined, optional
        An output-only field that indicates whether or not the subscription can receive messages.
    """


    avroConfig?: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecCloudStorageConfigAvroConfig

    bucketRef: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecCloudStorageConfigBucketRef

    filenamePrefix?: str

    filenameSuffix?: str

    maxBytes?: int

    maxDuration?: str

    state?: str


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecCloudStorageConfigAvroConfig:
    r"""
    If set, message data will be written to Cloud Storage in Avro format.

    Attributes
    ----------
    writeMetadata : bool, default is Undefined, optional
        When true, write the subscription name, messageId, publishTime, attributes, and orderingKey as additional fields in the output.
    """


    writeMetadata?: bool


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecCloudStorageConfigBucketRef:
    r"""
    User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like "gs://".

    Attributes
    ----------
    external : str, default is Undefined, optional
        Allowed value: The `name` field of a `StorageBucket` resource.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    """


    external?: str

    name?: str

    namespace?: str


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecDeadLetterPolicy:
    r"""
    A policy that specifies the conditions for dead lettering messages in
    this subscription. If dead_letter_policy is not set, dead lettering
    is disabled.

    The Cloud Pub/Sub service account associated with this subscription's
    parent project (i.e.,
    service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
    permission to Acknowledge() messages on this subscription.

    Attributes
    ----------
    deadLetterTopicRef : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecDeadLetterPolicyDeadLetterTopicRef, default is Undefined, optional
        dead letter topic ref
    maxDeliveryAttempts : int, default is Undefined, optional
        The maximum number of delivery attempts for any message. The value must be
        between 5 and 100.

        The number of delivery attempts is defined as 1 + (the sum of number of
        NACKs and number of times the acknowledgement deadline has been exceeded for the message).

        A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
        client libraries may automatically extend ack_deadlines.

        This field will be honored on a best effort basis.

        If this parameter is 0, a default value of 5 is used.
    """


    deadLetterTopicRef?: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecDeadLetterPolicyDeadLetterTopicRef

    maxDeliveryAttempts?: int


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecDeadLetterPolicyDeadLetterTopicRef:
    r"""
    pubsub cnrm cloud google com v1beta1 pub sub subscription spec dead letter policy dead letter topic ref

    Attributes
    ----------
    external : str, default is Undefined, optional
        Allowed value: string of the format `projects/{{project}}/topics/{{value}}`, where {{value}} is the `name` field of a `PubSubTopic` resource.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    """


    external?: str

    name?: str

    namespace?: str


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecExpirationPolicy:
    r"""
    A policy that specifies the conditions for this subscription's expiration.
    A subscription is considered active as long as any connected subscriber
    is successfully consuming messages from the subscription or is issuing
    operations on the subscription. If expirationPolicy is not set, a default
    policy with ttl of 31 days will be used.  If it is set but ttl is "", the
    resource never expires.  The minimum allowed value for expirationPolicy.ttl
    is 1 day.

    Attributes
    ----------
    ttl : str, default is Undefined, required
        Specifies the "time-to-live" duration for an associated resource. The
        resource expires if it is not active for a period of ttl.
        If ttl is set to "", the associated resource never expires.
        A duration in seconds with up to nine fractional digits, terminated by 's'.
        Example - "3.5s".
    """


    ttl: str


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecPushConfig:
    r"""
    If push delivery is used with this subscription, this field is used to
    configure it. An empty pushConfig signifies that the subscriber will
    pull and ack messages using API methods.

    Attributes
    ----------
    attributes : {str:str}, default is Undefined, optional
        Endpoint configuration attributes.

        Every endpoint has a set of API supported attributes that can
        be used to control different aspects of the message delivery.

        The currently supported attribute is x-goog-version, which you
        can use to change the format of the pushed message. This
        attribute indicates the version of the data expected by
        the endpoint. This controls the shape of the pushed message
        (i.e., its fields and metadata). The endpoint version is
        based on the version of the Pub/Sub API.

        If not present during the subscriptions.create call,
        it will default to the version of the API used to make
        such call. If not present during a subscriptions.modifyPushConfig
        call, its value will not be changed. subscriptions.get
        calls will always return a valid version, even if the
        subscription was created without this attribute.

        The possible values for this attribute are:

        - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
        - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
    noWrapper : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecPushConfigNoWrapper, default is Undefined, optional
        no wrapper
    oidcToken : PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecPushConfigOidcToken, default is Undefined, optional
        oidc token
    pushEndpoint : str, default is Undefined, required
        A URL locating the endpoint to which messages should be pushed.
        For example, a Webhook endpoint might use
        "https://example.com/push".
    """


    attributes?: {str:str}

    noWrapper?: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecPushConfigNoWrapper

    oidcToken?: PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecPushConfigOidcToken

    pushEndpoint: str


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecPushConfigNoWrapper:
    r"""
    When set, the payload to the push endpoint is not wrapped.Sets the
    'data' field as the HTTP body for delivery.

    Attributes
    ----------
    writeMetadata : bool, default is Undefined, required
        When true, writes the Pub/Sub message metadata to
        'x-goog-pubsub-<KEY>:<VAL>' headers of the HTTP request. Writes the
        Pub/Sub message attributes to '<KEY>:<VAL>' headers of the HTTP request.
    """


    writeMetadata: bool


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecPushConfigOidcToken:
    r"""
    If specified, Pub/Sub will generate and attach an OIDC JWT token as
    an Authorization header in the HTTP request for every pushed message.

    Attributes
    ----------
    audience : str, default is Undefined, optional
        Audience to be used when generating OIDC token. The audience claim
        identifies the recipients that the JWT is intended for. The audience
        value is a single case-sensitive string. Having multiple values (array)
        for the audience field is not supported. More info about the OIDC JWT
        token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
        Note: if not specified, the Push endpoint URL will be used.
    serviceAccountEmail : str, default is Undefined, required
        Service account email to be used for generating the OIDC token.
        The caller (for subscriptions.create, subscriptions.patch, and
        subscriptions.modifyPushConfig RPCs) must have the
        iam.serviceAccounts.actAs permission for the service account.
    """


    audience?: str

    serviceAccountEmail: str


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecRetryPolicy:
    r"""
    A policy that specifies how Pub/Sub retries message delivery for this subscription.

    If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
    RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message.

    Attributes
    ----------
    maximumBackoff : str, default is Undefined, optional
        The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    minimumBackoff : str, default is Undefined, optional
        The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    """


    maximumBackoff?: str

    minimumBackoff?: str


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionSpecTopicRef:
    r"""
    Reference to a PubSubTopic.

    Attributes
    ----------
    external : str, default is Undefined, optional
        Allowed value: string of the format `projects/{{project}}/topics/{{value}}`, where {{value}} is the `name` field of a `PubSubTopic` resource.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    """


    external?: str

    name?: str

    namespace?: str


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionStatus:
    r"""
    pubsub cnrm cloud google com v1beta1 pub sub subscription status

    Attributes
    ----------
    conditions : [PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionStatusConditionsItems0], default is Undefined, optional
        Conditions represent the latest available observation of the resource's current state.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.
    """


    conditions?: [PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionStatusConditionsItems0]

    observedGeneration?: int


schema PubsubCnrmCloudGoogleComV1beta1PubSubSubscriptionStatusConditionsItems0:
    r"""
    pubsub cnrm cloud google com v1beta1 pub sub subscription status conditions items0

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        Last time the condition transitioned from one status to another.
    message : str, default is Undefined, optional
        Human-readable message indicating details about last transition.
    reason : str, default is Undefined, optional
        Unique, one-word, CamelCase reason for the condition's last transition.
    status : str, default is Undefined, optional
        Status is the status of the condition. Can be True, False, Unknown.
    $type : str, default is Undefined, optional
        Type is the type of the condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    status?: str

    $type?: str


