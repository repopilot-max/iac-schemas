"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema MonitoringMetricDescriptor:
    r"""
    monitoring cnrm cloud google com v1beta1 monitoring metric descriptor

    Attributes
    ----------
    apiVersion : str, default is "monitoring.cnrm.cloud.google.com/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "MonitoringMetricDescriptor", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorSpec, default is Undefined, required
        spec
    status : MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorStatus, default is Undefined, optional
        status
    """


    apiVersion: "monitoring.cnrm.cloud.google.com/v1beta1" = "monitoring.cnrm.cloud.google.com/v1beta1"

    kind: "MonitoringMetricDescriptor" = "MonitoringMetricDescriptor"

    metadata?: v1.ObjectMeta

    spec: MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorSpec

    status?: MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorStatus


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorSpec:
    r"""
    monitoring cnrm cloud google com v1beta1 monitoring metric descriptor spec

    Attributes
    ----------
    description : str, default is Undefined, optional
        Immutable. A detailed description of the metric, which can be used in documentation.
    displayName : str, default is Undefined, optional
        Immutable. A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
    labels : [MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorSpecLabelsItems0], default is Undefined, optional
        Immutable. The set of labels that can be used to describe a specific instance of this metric type. For example, the `appengine.googleapis.com/http/server/response_latencies` metric type has a label for the HTTP response code, `response_code`, so you can look at latencies for successful responses or just for responses that failed.
    launchStage : str, default is Undefined, optional
        Immutable. Optional. The launch stage of the metric definition. Possible values: LAUNCH_STAGE_UNSPECIFIED, UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, DEPRECATED
    metadata : MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorSpecMetadata, default is Undefined, optional
        metadata
    metricKind : str, default is Undefined, required
        Immutable. Whether the metric records instantaneous values, changes to a value, etc. Some combinations of `metric_kind` and `value_type` might not be supported. Possible values: METRIC_KIND_UNSPECIFIED, GAUGE, DELTA, CUMULATIVE
    projectRef : MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorSpecProjectRef, default is Undefined, required
        project ref
    $type : str, default is Undefined, required
        Immutable. The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name `custom.googleapis.com` or `external.googleapis.com`. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
    unit : str, default is Undefined, optional
        Immutable. The units in which the metric value is reported. It is only applicable if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The `unit` defines the representation of the stored metric values. Different systems might scale the values to be more easily displayed (so a value of `0.02kBy` _might_ be displayed as `20By`, and a value of `3523kBy` _might_ be displayed as `3.5MBy`). However, if the `unit` is `kBy`, then the value of the metric is always in thousands of bytes, no matter how it might be displayed. If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an `INT64 CUMULATIVE` metric whose `unit` is `s{CPU}` (or equivalently `1s{CPU}` or just `s`). If the job uses 12,005 CPU-seconds, then the value is written as `12005`. Alternatively, if you want a custom metric to record data in a more granular way, you can create a `DOUBLE CUMULATIVE` metric whose `unit` is `ks{CPU}`, and then write the value `12.005` (which is `12005/1000`), or use `Kis{CPU}` and write `11.723` (which is `12005/1024`). The supported units are a subset of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html) standard: **Basic units (UNIT)** * `bit` bit * `By` byte * `s` second * `min` minute * `h` hour * `d` day * `1` dimensionless **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `E` exa (10^18) * `Z` zetta (10^21) * `Y` yotta (10^24) * `m` milli (10^-3) * `u` micro (10^-6) * `n` nano (10^-9) * `p` pico (10^-12) * `f` femto (10^-15) * `a` atto (10^-18) * `z` zepto (10^-21) * `y` yocto (10^-24) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or ratio (as an infix operator). For examples, `kBy/{email}` or `MiBy/10ms` (although you should almost never have `/s` in a metric `unit`; rates should always be computed at query time from the underlying cumulative or delta value). * `.` multiplication or composition (as an infix operator). For examples, `GBy.d` or `k{watt}.h`. The grammar for a unit is as follows: Expression = Component: { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: * `Annotation` is just a comment if it follows a `UNIT`. If the annotation is used alone, then the unit is equivalent to `1`. For examples, `{request}/s == 1/s`, `By{transmitted}/s == By/s`. * `NAME` is a sequence of non-blank printable ASCII characters not containing `{` or `}`. * `1` represents a unitary [dimensionless unit](https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in `1/s`. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as `1/d` or `{new-users}/d` (and a metric value `5` would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as `1000/d` or `k1/d` or `k{page_views}/d` (and a metric value of `5.3` would mean "5300 page views per day"). * `%` represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value `3` means "3 percent"). * `10^2.%` indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value `0.03` means "3 percent").
    valueType : str, default is Undefined, required
        Immutable. Whether the measurement is an integer, a floating-point number, etc. Some combinations of `metric_kind` and `value_type` might not be supported. Possible values: STRING, BOOL, INT64
    """


    description?: str

    displayName?: str

    labels?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorSpecLabelsItems0]

    launchStage?: str

    metadata?: MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorSpecMetadata

    metricKind: str

    projectRef: MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorSpecProjectRef

    $type: str

    unit?: str

    valueType: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorSpecLabelsItems0:
    r"""
    monitoring cnrm cloud google com v1beta1 monitoring metric descriptor spec labels items0

    Attributes
    ----------
    description : str, default is Undefined, optional
        Immutable. A human-readable description for the label.
    key : str, default is Undefined, optional
        Immutable. The key for this label. The key must meet the following criteria: * Does not exceed 100 characters. * Matches the following regular expression: `a-zA-Z*` * The first character must be an upper- or lower-case letter. * The remaining characters must be letters, digits, or underscores.
    valueType : str, default is Undefined, optional
        Immutable. The type of data that can be assigned to the label. Possible values: STRING, BOOL, INT64
    """


    description?: str

    key?: str

    valueType?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorSpecMetadata:
    r"""
    Immutable. Optional. Metadata which can be used to guide usage of the metric.

    Attributes
    ----------
    ingestDelay : str, default is Undefined, optional
        Immutable. The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
    launchStage : str, default is Undefined, optional
        Immutable. Deprecated. Must use the MetricDescriptor.launch_stage instead. Possible values: LAUNCH_STAGE_UNSPECIFIED, UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, DEPRECATED
    samplePeriod : str, default is Undefined, optional
        Immutable. The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
    """


    ingestDelay?: str

    launchStage?: str

    samplePeriod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorSpecProjectRef:
    r"""
    Immutable. The Project that this resource belongs to.

    Attributes
    ----------
    external : str, default is Undefined, optional
        The project for the resource

        Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    """


    external?: str

    name?: str

    namespace?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorStatus:
    r"""
    monitoring cnrm cloud google com v1beta1 monitoring metric descriptor status

    Attributes
    ----------
    conditions : [MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorStatusConditionsItems0], default is Undefined, optional
        Conditions represent the latest available observation of the resource's current state.
    monitoredResourceTypes : [str], default is Undefined, optional
        Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.
    selfLink : str, default is Undefined, optional
        The resource name of the metric descriptor.
    """


    conditions?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorStatusConditionsItems0]

    monitoredResourceTypes?: [str]

    observedGeneration?: int

    selfLink?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringMetricDescriptorStatusConditionsItems0:
    r"""
    monitoring cnrm cloud google com v1beta1 monitoring metric descriptor status conditions items0

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        Last time the condition transitioned from one status to another.
    message : str, default is Undefined, optional
        Human-readable message indicating details about last transition.
    reason : str, default is Undefined, optional
        Unique, one-word, CamelCase reason for the condition's last transition.
    status : str, default is Undefined, optional
        Status is the status of the condition. Can be True, False, Unknown.
    $type : str, default is Undefined, optional
        Type is the type of the condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    status?: str

    $type?: str


