"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema ComputeBackendBucket:
    r"""
    compute cnrm cloud google com v1beta1 compute backend bucket

    Attributes
    ----------
    apiVersion : str, default is "compute.cnrm.cloud.google.com/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ComputeBackendBucket", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpec, default is Undefined, required
        spec
    status : ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketStatus, default is Undefined, optional
        status
    """


    apiVersion: "compute.cnrm.cloud.google.com/v1beta1" = "compute.cnrm.cloud.google.com/v1beta1"

    kind: "ComputeBackendBucket" = "ComputeBackendBucket"

    metadata?: v1.ObjectMeta

    spec: ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpec

    status?: ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketStatus


schema ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpec:
    r"""
    compute cnrm cloud google com v1beta1 compute backend bucket spec

    Attributes
    ----------
    bucketRef : ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecBucketRef, default is Undefined, required
        bucket ref
    cdnPolicy : ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecCdnPolicy, default is Undefined, optional
        cdn policy
    compressionMode : str, default is Undefined, optional
        Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header. Possible values: ["AUTOMATIC", "DISABLED"].
    customResponseHeaders : [str], default is Undefined, optional
        Headers that the HTTP/S load balancer should add to proxied responses.
    description : str, default is Undefined, optional
        An optional textual description of the resource; provided by the
        client when the resource is created.
    edgeSecurityPolicy : str, default is Undefined, optional
        The security policy associated with this backend bucket.
    enableCdn : bool, default is Undefined, optional
        If true, enable Cloud CDN for this BackendBucket.
    resourceID : str, default is Undefined, optional
        Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
    """


    bucketRef: ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecBucketRef

    cdnPolicy?: ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecCdnPolicy

    compressionMode?: str

    customResponseHeaders?: [str]

    description?: str

    edgeSecurityPolicy?: str

    enableCdn?: bool

    resourceID?: str


schema ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecBucketRef:
    r"""
    Reference to the bucket.

    Attributes
    ----------
    external : str, default is Undefined, optional
        Allowed value: The `name` field of a `StorageBucket` resource.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    """


    external?: str

    name?: str

    namespace?: str


schema ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecCdnPolicy:
    r"""
    Cloud CDN configuration for this Backend Bucket.

    Attributes
    ----------
    bypassCacheOnRequestHeaders : [ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecCdnPolicyBypassCacheOnRequestHeadersItems0], default is Undefined, optional
        Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
    cacheKeyPolicy : ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecCdnPolicyCacheKeyPolicy, default is Undefined, optional
        cache key policy
    cacheMode : str, default is Undefined, optional
        Specifies the cache setting for all responses from this backend.
        The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC Possible values: ["USE_ORIGIN_HEADERS", "FORCE_CACHE_ALL", "CACHE_ALL_STATIC"].
    clientTtl : int, default is Undefined, optional
        Specifies the maximum allowed TTL for cached content served by this origin.
    defaultTtl : int, default is Undefined, optional
        Specifies the default TTL for cached content served by this origin for responses
        that do not have an existing valid TTL (max-age or s-max-age).
    maxTtl : int, default is Undefined, optional
        Specifies the maximum allowed TTL for cached content served by this origin.
    negativeCaching : bool, default is Undefined, optional
        Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    negativeCachingPolicy : [ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecCdnPolicyNegativeCachingPolicyItems0], default is Undefined, optional
        Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
        Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
    requestCoalescing : bool, default is Undefined, optional
        If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
    serveWhileStale : int, default is Undefined, optional
        Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    signedUrlCacheMaxAgeSec : int, default is Undefined, optional
        Maximum number of seconds the response to a signed URL request will
        be considered fresh. After this time period,
        the response will be revalidated before being served.
        When serving responses to signed URL requests,
        Cloud CDN will internally behave as though
        all responses from this backend had a "Cache-Control: public,
        max-age=[TTL]" header, regardless of any existing Cache-Control
        header. The actual headers served in responses will not be altered.
    """


    bypassCacheOnRequestHeaders?: [ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecCdnPolicyBypassCacheOnRequestHeadersItems0]

    cacheKeyPolicy?: ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecCdnPolicyCacheKeyPolicy

    cacheMode?: str

    clientTtl?: int

    defaultTtl?: int

    maxTtl?: int

    negativeCaching?: bool

    negativeCachingPolicy?: [ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecCdnPolicyNegativeCachingPolicyItems0]

    requestCoalescing?: bool

    serveWhileStale?: int

    signedUrlCacheMaxAgeSec?: int


schema ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecCdnPolicyBypassCacheOnRequestHeadersItems0:
    r"""
    compute cnrm cloud google com v1beta1 compute backend bucket spec cdn policy bypass cache on request headers items0

    Attributes
    ----------
    headerName : str, default is Undefined, optional
        The header field name to match on when bypassing cache. Values are case-insensitive.
    """


    headerName?: str


schema ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecCdnPolicyCacheKeyPolicy:
    r"""
    The CacheKeyPolicy for this CdnPolicy.

    Attributes
    ----------
    includeHttpHeaders : [str], default is Undefined, optional
        Allows HTTP request headers (by name) to be used in the
        cache key.
    queryStringWhitelist : [str], default is Undefined, optional
        Names of query string parameters to include in cache keys.
        Default parameters are always included. '&' and '=' will
        be percent encoded and not treated as delimiters.
    """


    includeHttpHeaders?: [str]

    queryStringWhitelist?: [str]


schema ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketSpecCdnPolicyNegativeCachingPolicyItems0:
    r"""
    compute cnrm cloud google com v1beta1 compute backend bucket spec cdn policy negative caching policy items0

    Attributes
    ----------
    code : int, default is Undefined, optional
        The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
        can be specified as values, and you cannot specify a status code more than once.
    ttl : int, default is Undefined, optional
        The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
        (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    """


    code?: int

    ttl?: int


schema ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketStatus:
    r"""
    compute cnrm cloud google com v1beta1 compute backend bucket status

    Attributes
    ----------
    conditions : [ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketStatusConditionsItems0], default is Undefined, optional
        Conditions represent the latest available observation of the resource's current state.
    creationTimestamp : str, default is Undefined, optional
        Creation timestamp in RFC3339 text format.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.
    selfLink : str, default is Undefined, optional
        self link
    """


    conditions?: [ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketStatusConditionsItems0]

    creationTimestamp?: str

    observedGeneration?: int

    selfLink?: str


schema ComputeCnrmCloudGoogleComV1beta1ComputeBackendBucketStatusConditionsItems0:
    r"""
    compute cnrm cloud google com v1beta1 compute backend bucket status conditions items0

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        Last time the condition transitioned from one status to another.
    message : str, default is Undefined, optional
        Human-readable message indicating details about last transition.
    reason : str, default is Undefined, optional
        Unique, one-word, CamelCase reason for the condition's last transition.
    status : str, default is Undefined, optional
        Status is the status of the condition. Can be True, False, Unknown.
    $type : str, default is Undefined, optional
        Type is the type of the condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    status?: str

    $type?: str


